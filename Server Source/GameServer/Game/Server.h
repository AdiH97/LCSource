#ifndef __SERVER_H_
#define __SERVER_H_

#include "LCList.h"
#include "LCString.h"
#include "NetMsg.h"
#include "Descriptor.h"
#include "PCList.h"
#include "Character.h"
#include "ConfigFile.h"
#include "Chat.h"
#include "EventManager.h"
#include "Event.h"
#include <set>
#include "MissionCase.h"
#include "ExtremeCube.h"
#include "Trigger.h"
#include "DBThread.h"

class CServer {
   public:
     socket_t m_ssock;
     CDescriptor *m_desclist;
     int m_nDesc;
     CDescriptor *m_messenger;
     CDescriptor *m_connector;
     CDescriptor *m_helper;
     CDescriptor *m_subHelper;
     CPCList m_playerList;
     fd_set m_input_set;
     fd_set m_output_set;
     fd_set m_exc_set;
     fd_set m_null_set;
     int m_nGuildMarkTable[3];
     unsigned char pDecryptBuffer[1012];
     unsigned char pTmpDecryptBuffer[1012];
     char *m_serverpath;
     CConfigFile m_config;
     int m_national;
     int m_serverno;
     int m_subno;
     CLCString m_serverAddr;
     int m_serverPort;
     int m_maxplayers;
     bool m_bReboot;
     bool m_nameserverisslow;
     bool m_bShutdown;
     TIMESTRUCT m_serverTime;
     int m_pulseReboot;
     int m_pulseShutdown;
     int m_pulseEndGame;
     int m_clientversionMin;
     int m_clientversionMax;
     bool m_bOnlyLocal;
     int m_pulseProcHeartBeatPerSec;
     LONGLONG m_statisticsItemBuy;
     LONGLONG m_statisticsItemSell;
     LONGLONG m_statistics152;
     LONGLONG m_statistics153;
     LONGLONG m_statistics154;
     LONGLONG m_statistics155;
     LONGLONG m_statistics156;
     LONGLONG m_statistics157;
     LONGLONG m_statistics158;
     LONGLONG m_statistics159;
     LONGLONG m_statistics160;
     LONGLONG m_statistics161;
     LONGLONG m_statistics162;
     LONGLONG m_statistics163;
     LONGLONG m_statistics197;
     LONGLONG m_statistics198;
     LONGLONG m_statistics199;
     int m_statisticsPulse;
     LONGLONG m_taxItem;
     LONGLONG m_taxProduceCastle;
     int m_taxSavePulse;
     int m_taxDivGuild;
     LONGLONG m_taxItemDratan;
     LONGLONG m_taxProduceCastleDratan;
     bool m_bLoadPartyInfo;
     timeval m_tvLoop;
     int m_nLoop;
     int m_bLoop;
     CDescriptor *m_descLoop;
     CDescriptor *m_observer;
     CDescriptor *m_chatmonitor[20];
     CDescriptor **m_gmtool;
     int m_nGMToolCount;
     CLCList<CParty*> m_listParty;
     CLCList<CExpedition*> m_listExped;
     CLCList<CPartyMatchMember*> m_listPartyMatchMember;
     CLCList<CPartyMatchParty*> m_listPartyMatchParty;
     CLCList<CChatGroup*> m_chatList;
     CItemList m_itemProtoList;
     CCatalogList m_catalogList;
     CLCList<int> m_limitCT;
     CSetItemProtoList m_setItemProtoList;
     CFactoryProtoList m_factoryItemProtoList;
     RewardEvnetItemManager m_rewardItemList;
     int m_pulse;
     int m_gameTime;
     int m_lcStartTime;
     int m_resetWeather;
     int m_resetAdjustItem;
     MYSQL m_dbchar;
     MYSQL m_dbdata;
     MYSQL m_dbcastle;
     MYSQL m_dbTrigger;
     MYSQL m_dbPostThread;
     MYSQL m_dbPost;
     MYSQL m_dbcharingame;
     CDBThread m_dbthread;
     bool m_brunconnector;
     bool m_brunmessenger;
     bool m_brunhelper;
     bool m_brunsubhelper;
     CNetMsg m_messengerConnMsg;
     CNetMsg m_connectorConnMsg;
     CNetMsg m_helperConnMsg;
     CNetMsg m_subHelperConnMsg;
     int m_numZone;
     CZone *m_zones;
     CNPCProtoList m_npcProtoList;
     CMagicProtoList m_magicProtoList;
     CSkillProtoList m_skillProtoList;
     CQuestProtoList m_questProtoList;
     COptionProtoList m_optionProtoList;
     CRareOptionProtoList m_rareOptionList;
     CSSkillProtoList m_sSkillProtoList;
     CGuildList m_guildlist;
     CAPetProtoList m_pApetlist;
     CLuckyDrawBox m_LuckyDrawBox;
     CMonsterMercenary m_MonsterMercenary;
     bool m_bDoubleEvent;
     int m_bDoubleEventZone;
     time_t m_tUpgradeEventStart;
     time_t m_tUpgradeEventEnd;
     int m_bDoubleNasPercent;
     int m_bDoubleNasGetPercent;
     int m_bDoubleExpPercent;
     int m_bDoubleSpPercent;
     int m_bDoubleProducePercent;
     int m_bDoubleProduceNum;
     int m_CollectBugEventPercent;
     bool m_bDoubleExpEvent;
     int m_expPercent;
     bool m_bLattoEvent;
     bool m_bNewYearEvent;
     bool m_bValentineEvent;
     bool m_bWhiteDayEvent;
     bool m_bpSiteGive;
     int m_bpSiteCount;
     int m_itemDropProb;
     int m_moneyDropProb;
     int m_aNotice[5];
     int m_nMoonStoneNas;
     int m_nItemDropEventRate;
     bool m_bEventOX;
     time_t m_timeEventOXStart;
     CLCList<COXQuizData*> m_listOXQuiz;
     int m_nOXQuizSeqNo;
     bool m_bOXQuizNoticeStart;
     time_t m_timeOXQuizLimit;
     int m_nOXQuizRealNo;
     int m_nOXQuizGMCharIndex;
     bool m_bRecommend;
     int m_pulseRecommendMoonstone;
     bool m_bNonPK;
     int m_nPulseSaveGuildPoint;
     bool m_bDoublePetExpEvent;
     int m_PetExpPercent;
     bool m_bDoubleAttackEvent;
     int m_AttackPercent;
     int m_nDVDCharAttackRate;
     int m_nDVDCharDefanseRate;
     int m_nDVDCharMoveSpeedRate;
     unsigned int m_unEventXmasTreePoint;
     int m_nExpLimit;
     int m_nSpLimit;
     CGoldenBallEventData m_clGoldenBall;
     int m_iRemainOclock;
     int m_iRemain24clock;
     tm m_tRealSystemTime;
     bool m_bTimeTable[24];
     int *m_iZoneExp;
     int m_iTimeInterval;
     int m_iStartTime;
     int m_iEndTime;
     bool m_bDungeonTimeToggle;
     bool m_bIsTime;
     int m_iZoneCount;
     CGrobalEcho gecho;
     bool m_bCashShopLock;
     CMoonStoneReward m_moonstoneReward;
     CZone *m_comboZone;
     CMIssionCaseList m_missionCaseList;
     CExtremeCube m_extremeCube;
     CTrigger_List m_CTriggerDBInfo;
     CAffinityProtoList m_affinityProtoList;
     CTitleProtoList m_titleProtoList;
     CLacarette m_lacarette;
     CRaidInfo m_RaidInfo;
     time_t m_tRaidResetProcess;
     int m_nProcess;
     bool m_bCanEnterTheRaidDungeon;
     bool m_bIsCheckTime;
     int m_nResetDay;
     int m_nResethr;
     int m_nResetmin;
     CLCList<CNPC*> m_listNpcDropItemAtTime;
     bool m_bApplySkillToNPC;
     CRoyalRumble m_RoyalRumble;
     bool bTreasureMapLinkZoneDrop;
     std::set<LONGLONG, std::less<LONGLONG>, std::allocator<LONGLONG> > m_PCMemSet;
   private:
     CPostOfficeAgent m_postOfficeAgent;
     CLCString m_userserverIP;
     int m_userserverPort;
   public:
     CRewardManager m_rewardMgr;
     CDropManager m_dropItemMgr;
     CEventAutomationManager m_eventAutomationMgr;
   private:
     int m_dbPingPulse;

   public:
     CServer(void);
     ~CServer();
     void GetOClockRemain(void);
     void GMToolCharPrePlay(CDescriptor *);
     int addChatGroup(int &, int &, CLCString);
     void delChatGroup(int, int, CLCString);
     void SendChatGroup(__tagMsgExMessengerType, int, int, int, CLCString, CLCString);
     void * FindChatGroup(int, int);
     void discCharChatGroup(CLCString);
     int GetMaxChatIndexPerPC(int);
     void addNotice(int, int);
     bool DropProbLoad(void);
     char * GetServerPath(void);
     bool LoadSettingFile(void);
     bool LoadSettings(void);
     bool ConnectDB(void);
     void DisconnectDB(bool);
     bool CreateDBThread(void);
     bool InitGame(void);
     int GetMaxPlayers(void);
     int GetServerTime(void);
     int FindZone(int);
     int FindNearestZone(int, float, float, int *, int *);
     bool MakeBillingClient(void);
     void SetHeaders(void);
     void SendBillingHeader(void);
     void ProcessBilling(CNetMsg &);
     static void * BillingConnect(void *);
     bool MakeMessengerClient(void);
     void SendMessengerHeader(void);
     static void * MessengerConnect(void *);
     void ProcessMessengerMessage(CNetMsg &);
     void ProcessEventMessage(CNetMsg &);
     bool MakeHelperClient(void);
     void SendHelperHeader(void);
     static void * HelperConnect(void *);
     void ProcessHelperMessage(CNetMsg &);
     bool MakeSubHelperClient(void);
     void SendSubHelperHeader(void);
     void ProcessSubHelperMessage(CNetMsg &);
     static void * SubHelperConnect(void *);
     socket_t InitSocket(void);
     static int SetSendbuf(int);
     in_addr * GetBindAddr(void);
     static void Nonblock(int);
     void Run(void);
     void Close(void);
     static void ServerSleep(timeval *);
     void HeartBeat(void);
     int NewDescriptor(int);
     void CloseSocket(CDescriptor *, bool);
     void SendOutput(CDescriptor *);
     void SendOutput(CCharacter *);
     bool DisConnectLogedIn(CDescriptor *, bool);
     CDescriptor * FindConnectIdName(const char *, CDescriptor *);
     CDescriptor * FindUser(int);
     void CommandInterpreter(CDescriptor *, CNetMsg &);
     void CharPrePlay(CDescriptor *);
     void DecreaseTimeForPC(CPC *);
     void MoonStoneEndProcess(CPC *);
     void AddTaxItem(long long);
     void AddTaxProduceCastle(long long);
     void ResetTax(void);
     void ResetTaxDratan(void);
     void AddTaxItemDratan(long long);
     void AddTaxProduceCastleDratan(long long);
     void SaveTax(void);
     void DivideTax(void);
     void ChangeTaxGuild(void);
     CParty * FindPartyByBossIndex(int);
     CParty * FindPartyByMemberIndex(int, bool);
     CExpedition * FindExpedByBossIndex(int);
     CExpedition * FindExpedByMemberIndex(int, bool);
     CPartyMatchMember * FindPartyMatchMemberByCharIndex(int);
     CPartyMatchParty * FindPartyMatchPartyByBossIndex(int);
     bool LoadOXQuiz(void);
   private:
     void ProcTax(void);
     void ProcMobItemControl(void);
     void ChangeWeather(void);
     void ProcLoopCount(void);
     void ProcStatistics(void);
     void ProcOXQuiz(void);
     void ProcRecommendServerMoonstone(void);
     void ProcGoldenBall(void);
   public:
     void ModifyDungeonTime(int);
     void CheckDungeonTime(void);
     void LoadDungeonTime(int);
     void SaveDungeonTime(int);
     void SetDungeonTime(void);
     void ProcMonsterCombo(void);
     void ProcEndExped(void);
     void ProcEndParty(void);
     int GetTriggerSetTypeToZoneIndex(int);
     void ProcTrigger(void);
     void CheckMobActivityAndAkanProc(CZone &, CArea &);
     void CheckEventTime(void);
     int GetCastllanZoneZum(int);
     void CheckRaidReset(void);
     void ResetRaid(void);
     void ItemDropAtTime(void);
     void writeTreasureMapSaveFile(void);
     void readTreasureMapSaveFile(void);
     void CheckPkDisPosiotionPointReward(void);
     void setUserserverIP(CLCString);
     void setUserserverPort(int);
     CLCString getUserserverIP(void);
     int getUserserverPort(void);
     CPostOfficeAgent * getPostOfficeAgent(void);
     CEventInfo * getEventInfo(int);
     CEventInfo * getActiveEventInfo(int);
     bool addActiveEvent(int, bool);
     bool removeActiveEvent(int, bool);
     bool isActiveEvent(int);
     std::map<int, CEventInfo*, std::less<int>, std::allocator<std::pair<int const, CEventInfo*> > > * getActiveEvenList(void);
     std::map<int, CEventInfo, std::less<int>, std::allocator<std::pair<int const, CEventInfo> > > * getEvenList(void);
     bool isActiveEventNpc(int, int &);
     bool isEventNpc(int, int &, bool &);
     void addNpcRegenInfo(CNPCRegenInfo *);
     void doEventDropItem(CNPC *, CPC *, CPC *);
     bool GetOutDratanDungeon(CPC *);
   private:
     void PingDB(void);
 };
#endif //__SERVER_H_
